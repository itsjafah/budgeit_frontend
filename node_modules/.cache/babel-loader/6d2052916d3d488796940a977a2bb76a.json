{"ast":null,"code":"import _toConsumableArray from \"/Users/sinnam/Desktop/budgeit_frontend/budgeit/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/sinnam/Desktop/budgeit_frontend/budgeit/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// 1. reducer = returns initial state without doing anything else//\n// const initialState = {\n//   articles: []\n// }\n//\n// 2. .push is an impure function - alters original array\n// const rootReducer = (state = initialState, action) => state\n//\n// export default rootReducer\n// import { ADD_USER } from \"../constants/action-types\";\n// const initialState = {\n//   articles: []\n// };\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_USER:\n//       state.articles.push(action.payload);\n//       return state;\n//     default:\n//       return state;\n//   }\n// };\n// export default rootReducer;\n// 3. use Array.prototype.concat - pure function\n// import { ADD_USER } from \"../constants/action-types\";\n// const initialState = {\n//   articles: []\n// };\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_USER:\n//       return { ...state, articles: state.articles.concat(action.payload) };\n//     default:\n//       return state;\n//   }\n// };\n// export default rootReducer;\n// 4. with spread operator, make reducer better\nimport { ADD_USER } from \"../constants/action-type\";\nvar initialState = {\n  user: false\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_USER:\n      return _objectSpread({}, state, {\n        articles: _toConsumableArray(state.articles).concat([action.payload])\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/sinnam/Desktop/budgeit_frontend/budgeit/src/reducers/index.js"],"names":["ADD_USER","initialState","user","rootReducer","state","action","type","articles","payload"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,SAASA,QAAT,QAAyB,0BAAzB;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AADa,CAArB;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,QAAL;AACE,+BAAYI,KAAZ;AAAmBG,QAAAA,QAAQ,qBAAMH,KAAK,CAACG,QAAZ,UAAsBF,MAAM,CAACG,OAA7B;AAA3B;;AACF;AACE,aAAOJ,KAAP;AAJJ;AAMD,CAPD;;AAQA,eAAeD,WAAf","sourcesContent":["// 1. reducer = returns initial state without doing anything else//\n// const initialState = {\n//   articles: []\n// }\n//\n\n// 2. .push is an impure function - alters original array\n// const rootReducer = (state = initialState, action) => state\n//\n// export default rootReducer\n\n// import { ADD_USER } from \"../constants/action-types\";\n// const initialState = {\n//   articles: []\n// };\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_USER:\n//       state.articles.push(action.payload);\n//       return state;\n//     default:\n//       return state;\n//   }\n// };\n// export default rootReducer;\n\n// 3. use Array.prototype.concat - pure function\n// import { ADD_USER } from \"../constants/action-types\";\n// const initialState = {\n//   articles: []\n// };\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_USER:\n//       return { ...state, articles: state.articles.concat(action.payload) };\n//     default:\n//       return state;\n//   }\n// };\n// export default rootReducer;\n\n// 4. with spread operator, make reducer better\nimport { ADD_USER } from \"../constants/action-type\";\nconst initialState = {\n  user: false\n};\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_USER:\n      return { ...state, articles: [...state.articles, action.payload] };\n    default:\n      return state;\n  }\n};\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}