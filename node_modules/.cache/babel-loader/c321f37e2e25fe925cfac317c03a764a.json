{"ast":null,"code":"import _objectSpread from \"/Users/sinnam/Desktop/budgeit_frontend/budgeit/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/sinnam/Desktop/budgeit_frontend/budgeit/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { GET_CATEGORIES, GET_CATEGORY, ADD_CATEGORY, EDIT_CATEGORY, DELETE_CATEGORY } from \"../constants/action-type\";\nvar initialState = {\n  categories: [],\n  id: '',\n  title: '',\n  color: ''\n};\n\nvar categoryReducer = function categoryReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var categories;\n  var category;\n\n  switch (action.type) {\n    case GET_CATEGORIES:\n      categories = _toConsumableArray(state.categories).concat(_toConsumableArray(action.payload));\n      return _objectSpread({}, state, {\n        categories: categories\n      });\n\n    case GET_CATEGORY:\n      categories = _toConsumableArray(state.categories).concat(_toConsumableArray(action.payload));\n      return _objectSpread({}, state, {\n        categories: categories\n      });\n\n    case ADD_CATEGORY:\n      categories = _toConsumableArray(state.categories).concat(_toConsumableArray(action.payload));\n      return _objectSpread({}, state, {\n        categories: categories\n      });\n\n    case EDIT_CATEGORY:\n      categories = _toConsumableArray(state.categories).map(function (category) {\n        if (category.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return category;\n        }\n      });\n      return _objectSpread({}, state, {\n        categories: categories\n      });\n\n    case DELETE_CATEGORY:\n      categories = _toConsumableArray(state.categories).filter(function (category) {\n        if (category.id !== action.payload.id) {\n          return category;\n        }\n      });\n      debugger;\n      return _objectSpread({}, state, {\n        categories: categories\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default categoryReducer;","map":{"version":3,"sources":["/Users/sinnam/Desktop/budgeit_frontend/budgeit/src/reducers/categoryReducer.js"],"names":["GET_CATEGORIES","GET_CATEGORY","ADD_CATEGORY","EDIT_CATEGORY","DELETE_CATEGORY","initialState","categories","id","title","color","categoryReducer","state","action","category","type","payload","map","filter"],"mappings":";;AAAA,SAASA,cAAT,EAAyBC,YAAzB,EAAuCC,YAAvC,EAAqDC,aAArD,EAAoEC,eAApE,QAA2F,0BAA3F;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,EADO;AAEnBC,EAAAA,EAAE,EAAE,EAFe;AAGnBC,EAAAA,KAAK,EAAE,EAHY;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;AACxD,MAAIN,UAAJ;AACA,MAAIO,QAAJ;;AACA,UAAQD,MAAM,CAACE,IAAf;AACE,SAAKd,cAAL;AACEM,MAAAA,UAAU,sBAAOK,KAAK,CAACL,UAAb,4BAA4BM,MAAM,CAACG,OAAnC,EAAV;AACA,+BAAYJ,KAAZ;AAAmBL,QAAAA,UAAU,EAAVA;AAAnB;;AACF,SAAKL,YAAL;AACEK,MAAAA,UAAU,sBAAOK,KAAK,CAACL,UAAb,4BAA4BM,MAAM,CAACG,OAAnC,EAAV;AACA,+BAAYJ,KAAZ;AAAmBL,QAAAA,UAAU,EAAVA;AAAnB;;AACF,SAAKJ,YAAL;AACEI,MAAAA,UAAU,sBAAOK,KAAK,CAACL,UAAb,4BAA4BM,MAAM,CAACG,OAAnC,EAAV;AACA,+BAAYJ,KAAZ;AAAmBL,QAAAA,UAAU,EAAVA;AAAnB;;AACF,SAAKH,aAAL;AACEG,MAAAA,UAAU,GAAG,mBAAIK,KAAK,CAACL,UAAV,EAAsBU,GAAtB,CAA0B,UAAAH,QAAQ,EAAI;AACjD,YAAIA,QAAQ,CAACN,EAAT,KAAgBK,MAAM,CAACG,OAAP,CAAeR,EAAnC,EAAwC;AACtC,iBAAOK,MAAM,CAACG,OAAd;AACD,SAFD,MAEO;AACL,iBAAOF,QAAP;AACD;AACF,OANY,CAAb;AAOA,+BAAYF,KAAZ;AAAmBL,QAAAA,UAAU,EAAVA;AAAnB;;AACF,SAAKF,eAAL;AACEE,MAAAA,UAAU,GAAG,mBAAIK,KAAK,CAACL,UAAV,EAAsBW,MAAtB,CAA6B,UAAAJ,QAAQ,EAAI;AACpD,YAAIA,QAAQ,CAACN,EAAT,KAAgBK,MAAM,CAACG,OAAP,CAAeR,EAAnC,EAAwC;AACtC,iBAAOM,QAAP;AACD;AACF,OAJY,CAAb;AAKA;AACA,+BAAYF,KAAZ;AAAmBL,QAAAA,UAAU,EAAVA;AAAnB;;AACF;AACE,aAAOK,KAAP;AA5BJ;AA8BD,CAjCD;;AAkCA,eAAeD,eAAf","sourcesContent":["import { GET_CATEGORIES, GET_CATEGORY, ADD_CATEGORY, EDIT_CATEGORY, DELETE_CATEGORY } from \"../constants/action-type\";\n\nconst initialState = {\n  categories: [],\n  id: '',\n  title: '',\n  color: ''\n};\n\nconst categoryReducer = (state = initialState, action) => {\n  let categories\n  let category\n  switch (action.type) {\n    case GET_CATEGORIES:\n      categories = [...state.categories, ...action.payload]\n      return { ...state, categories }\n    case GET_CATEGORY:\n      categories = [...state.categories, ...action.payload]\n      return { ...state, categories }\n    case ADD_CATEGORY:\n      categories = [...state.categories, ...action.payload]\n      return { ...state, categories }\n    case EDIT_CATEGORY:\n      categories = [...state.categories].map(category => {\n        if (category.id === action.payload.id ) {\n          return action.payload\n        } else {\n          return category\n        }\n      })\n      return { ...state, categories }\n    case DELETE_CATEGORY:\n      categories = [...state.categories].filter(category => {\n        if (category.id !== action.payload.id ) {\n          return category\n        }\n      })\n      debugger\n      return { ...state, categories }\n    default:\n      return state;\n  }\n}\nexport default categoryReducer;\n"]},"metadata":{},"sourceType":"module"}