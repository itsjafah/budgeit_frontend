{"ast":null,"code":"// 1. reducer = returns initial state without doing anything else//\n// const initialState = {\n//   articles: []\n// }\n//\n// 2. .push is an impure function - alters original array\n// const rootReducer = (state = initialState, action) => state\n//\n// export default rootReducer\n// import { ADD_ARTICLE } from \"../constants/action-types\";\n// const initialState = {\n//   articles: []\n// };\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_ARTICLE:\n//       state.articles.push(action.payload);\n//       return state;\n//     default:\n//       return state;\n//   }\n// };\n// export default rootReducer;\n// 3. use Array.prototype.concat - pure function\n// import { ADD_ARTICLE } from \"../constants/action-types\";\n// const initialState = {\n//   articles: []\n// };\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_ARTICLE:\n//       return { ...state, articles: state.articles.concat(action.payload) };\n//     default:\n//       return state;\n//   }\n// };\n// export default rootReducer;\n// 4. with spread operator, make reducer better\n// import { ADD_ARTICLE } from \"../constants/action-type\";\n// const initialState = {\n//   articles: []\n// };\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_ARTICLE:\n//       return { ...state, articles: [...state.articles, action.payload] };\n//     default:\n//       return state;\n//   }\n// };\n// export default rootReducer;","map":{"version":3,"sources":["/Users/sinnam/Desktop/budgeit_frontend/budgeit/src/reducers/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// 1. reducer = returns initial state without doing anything else//\n// const initialState = {\n//   articles: []\n// }\n//\n\n// 2. .push is an impure function - alters original array\n// const rootReducer = (state = initialState, action) => state\n//\n// export default rootReducer\n\n// import { ADD_ARTICLE } from \"../constants/action-types\";\n// const initialState = {\n//   articles: []\n// };\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_ARTICLE:\n//       state.articles.push(action.payload);\n//       return state;\n//     default:\n//       return state;\n//   }\n// };\n// export default rootReducer;\n\n// 3. use Array.prototype.concat - pure function\n// import { ADD_ARTICLE } from \"../constants/action-types\";\n// const initialState = {\n//   articles: []\n// };\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_ARTICLE:\n//       return { ...state, articles: state.articles.concat(action.payload) };\n//     default:\n//       return state;\n//   }\n// };\n// export default rootReducer;\n\n// 4. with spread operator, make reducer better\n// import { ADD_ARTICLE } from \"../constants/action-type\";\n// const initialState = {\n//   articles: []\n// };\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_ARTICLE:\n//       return { ...state, articles: [...state.articles, action.payload] };\n//     default:\n//       return state;\n//   }\n// };\n// export default rootReducer;\n"]},"metadata":{},"sourceType":"module"}